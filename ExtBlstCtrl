--Allowed Computer IDs (Add an entra "or" for more, must have 2 IDs)
function IDv(x)          --Computer Sides
 if x == 6 or x == 17 then     --Top    =Door Closed Signal
  idcheck = true
   if not currentClient then           --Front  =Ender Modem
    currentClient = id
    print("Locked to ID:", currentClient)
   end
   rednet.send(id,"IDTrue") --Left   -Open Door Signal
  else                     --Right  -Close Door Signal
  idcheck = false          --Back   =Door Open Signal
  end                      --Bottom =Speaker
 end

--Open modem
rednet.open("front")
local currentClient = nil

--Client Lock
while true do
 id,message = rednet.receive()
 --Ignore others if busy
 if currentClient and id ~= currentClient then
  rednet.send(id, "BUSY")
 end


 --Reset Outputs
 redstone.setOutput("left",false)
 redstone.setOutput("right",false)

 --Door status
 --Door not fully open/closed
 if not redstone.getInput("top") and not redstone.getInput("back") then
  print("ERROR: DOOR MALFUNCTION (on last open)")
 end
 --Door Closed
 if redstone.getInput("top") and not redstone.getInput("back") then
  print("Door Started Sealed")
 end
 --Door Open
 if not redstone.getInput("top",false) and redstone.getInput("back") then
  print("Door Started Unsealed")
 end

 --Get allowed key
 IDv(id)
 if message == "V4u17" then --key here
  request = true
  rednet.send(id,"KeyTrue")
  else
  request = false
  rednet.send(id)
 end
 sleep(0.5)

 --Is message and ID allowed
 if request == true and idcheck == true then
  allowed = true
  print(id,"Authorised")
  rednet.send(id,"AccTrue")
  else
  allowed = false
  print(id,"Unauthorised")
 end
 --Open Door
 if allowed == true and redstone.getInput("top") and not redstone.getInput("back") then
  print("Unsealing Door")
  shell.run("speaker play door.dfpwm")
  rednet.send(id,"The Vault Door is now opening.")
  redstone.setOutput("left",true)
  sleep(1)
  redstone.setOutput("left",false)
  sleep(23)
   if not redstone.getInput("top") and redstone.getInput("back") then
   rednet.send(id,"Door opened.")
   else
   rednet.send(id,"ERROR: UNABLE TO UNSEAL")
  end
  shell.run("startup")
 end

 --Close Door
 if allowed == true and redstone.getInput("back") and not redstone.getInput("top") then
  print("Sealing Door")
  rednet.send(id,"The Vault Door is now closing.")
  redstone.setOutput("right",true)
  sleep(1)
  redstone.setOutput("right",false)
  sleep(23)
   if redstone.getInput("top") and not redstone.getInput("back") then
   rednet.send(id,"Door closed.")
   else
   rednet.send(id,"ERROR: UNABLE TO SEAL")
  end
  shell.run("startup")
 end
end
